{
  "models": { "ILA":"m0" , "VERILOG": "m1" },
  "state mapping": { 
    "pc"  : [["__START__","m1.near_mem$imem_pc"],["__IEND__", "#pc_after#"]],

    "x0"  : "m0.x0 == 0"  ,
    "x1"  : [["__START__" , "#regPull1#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[1]"]]  ,
    "x2"  : [["__START__" , "#regPull2#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[2]"]]  ,
    "x3"  : [["__START__" , "#regPull3#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[3]"]]  ,
    "x4"  : [["__START__" , "#regPull4#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[4]"]]  ,
    "x5"  : [["__START__" , "#regPull5#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[5]"]]  ,
    "x6"  : [["__START__" , "#regPull6#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[6]"]]  ,
    "x7"  : [["__START__" , "#regPull7#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[7]"]]  ,
    "x8"  : [["__START__" , "#regPull8#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[8]"]]  ,
    "x9"  : [["__START__" , "#regPull9#"]  , ["__IEND__" , "m1.gpr_regfile.regfile.arr[9]"]]  ,
    "x10" : [["__START__" , "#regPull10#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[10]"]] ,
    "x11" : [["__START__" , "#regPull11#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[11]"]] ,
    "x12" : [["__START__" , "#regPull12#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[12]"]] ,
    "x13" : [["__START__" , "#regPull13#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[13]"]] ,
    "x14" : [["__START__" , "#regPull14#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[14]"]] ,
    "x15" : [["__START__" , "#regPull15#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[15]"]] ,
    "x16" : [["__START__" , "#regPull16#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[16]"]] ,
    "x17" : [["__START__" , "#regPull17#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[17]"]] ,
    "x18" : [["__START__" , "#regPull18#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[18]"]] ,
    "x19" : [["__START__" , "#regPull19#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[19]"]] ,
    "x20" : [["__START__" , "#regPull20#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[20]"]] ,
    "x21" : [["__START__" , "#regPull21#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[21]"]] ,
    "x22" : [["__START__" , "#regPull22#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[22]"]] ,
    "x23" : [["__START__" , "#regPull23#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[23]"]] ,
    "x24" : [["__START__" , "#regPull24#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[24]"]] ,
    "x25" : [["__START__" , "#regPull25#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[25]"]] ,
    "x26" : [["__START__" , "#regPull26#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[26]"]] ,
    "x27" : [["__START__" , "#regPull27#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[27]"]] ,
    "x28" : [["__START__" , "#regPull28#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[28]"]] ,
    "x29" : [["__START__" , "#regPull29#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[29]"]] ,
    "x30" : [["__START__" , "#regPull30#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[30]"]] ,
    "x31" : [["__START__" , "#regPull31#"] , ["__IEND__" , "m1.gpr_regfile.regfile.arr[31]"]] ,

    "mem"               : "**MEM**XRAM"
  },

  "interface mapping": {

         "CLK"                                    : "**CLOCK**",
         "RST_N"                                  : "**NRESET**",
         "hart0_server_reset_request_put"         : "**KEEP**",
         "EN_hart0_server_reset_request_put"      : "**KEEP**",
         "RDY_hart0_server_reset_request_put"     : "**KEEP**",
         "EN_hart0_server_reset_response_get"     : "**KEEP**",
         "hart0_server_reset_response_get"        : "**KEEP**",
         "RDY_hart0_server_reset_response_get"    : "**KEEP**",
         "imem_master_awvalid"                    : "**KEEP**",
         "imem_master_awid"                       : "**KEEP**",
         "imem_master_awaddr"                     : "**KEEP**",
         "imem_master_awlen"                      : "**KEEP**",
         "imem_master_awsize"                     : "**KEEP**",
         "imem_master_awburst"                    : "**KEEP**",
         "imem_master_awlock"                     : "**KEEP**",
         "imem_master_awcache"                    : "**KEEP**",
         "imem_master_awprot"                     : "**KEEP**",
         "imem_master_awqos"                      : "**KEEP**",
         "imem_master_awregion"                   : "**KEEP**",
         "imem_master_awready"                    : "**KEEP**",
         "imem_master_wvalid"                     : "**KEEP**",
         "imem_master_wdata"                      : "**KEEP**",
         "imem_master_wstrb"                      : "**KEEP**",
         "imem_master_wlast"                      : "**KEEP**",
         "imem_master_wready"                     : "**KEEP**",
         "imem_master_bvalid"                     : "**KEEP**",
         "imem_master_bid"                        : "**KEEP**",
         "imem_master_bresp"                      : "**KEEP**",
         "imem_master_bready"                     : "**KEEP**",
         "imem_master_arvalid"                    : "**KEEP**",
         "imem_master_arid"                       : "**KEEP**",
         "imem_master_araddr"                     : "**KEEP**",
         "imem_master_arlen"                      : "**KEEP**",
         "imem_master_arsize"                     : "**KEEP**",
         "imem_master_arburst"                    : "**KEEP**",
         "imem_master_arlock"                     : "**KEEP**",
         "imem_master_arcache"                    : "**KEEP**",
         "imem_master_arprot"                     : "**KEEP**",
         "imem_master_arqos"                      : "**KEEP**",
         "imem_master_arregion"                   : "**KEEP**",
         "imem_master_arready"                    : "**KEEP**",
         "imem_master_rvalid"                     : "**KEEP**",
         "imem_master_rid"                        : "**KEEP**",
         "imem_master_rdata"                      : "**KEEP**",
         "imem_master_rresp"                      : "**KEEP**",
         "imem_master_rlast"                      : "**KEEP**",
         "imem_master_rready"                     : "**KEEP**",
         "dmem_master_awvalid"                    : "**KEEP**",
         "dmem_master_awid"                       : "**KEEP**",
         "dmem_master_awaddr"                     : "**KEEP**",
         "dmem_master_awlen"                      : "**KEEP**",
         "dmem_master_awsize"                     : "**KEEP**",
         "dmem_master_awburst"                    : "**KEEP**",
         "dmem_master_awlock"                     : "**KEEP**",
         "dmem_master_awcache"                    : "**KEEP**",
         "dmem_master_awprot"                     : "**KEEP**",
         "dmem_master_awqos"                      : "**KEEP**",
         "dmem_master_awregion"                   : "**KEEP**",
         "dmem_master_awready"                    : "**KEEP**",
         "dmem_master_wvalid"                     : "**KEEP**",
         "dmem_master_wdata"                      : "**KEEP**",
         "dmem_master_wstrb"                      : "**KEEP**",
         "dmem_master_wlast"                      : "**KEEP**",
         "dmem_master_wready"                     : "**KEEP**",
         "dmem_master_bvalid"                     : "**KEEP**",
         "dmem_master_bid"                        : "**KEEP**",
         "dmem_master_bresp"                      : "**KEEP**",
         "dmem_master_bready"                     : "**KEEP**",
         "dmem_master_arvalid"                    : "**KEEP**",
         "dmem_master_arid"                       : "**KEEP**",
         "dmem_master_araddr"                     : "**KEEP**",
         "dmem_master_arlen"                      : "**KEEP**",
         "dmem_master_arsize"                     : "**KEEP**",
         "dmem_master_arburst"                    : "**KEEP**",
         "dmem_master_arlock"                     : "**KEEP**",
         "dmem_master_arcache"                    : "**KEEP**",
         "dmem_master_arprot"                     : "**KEEP**",
         "dmem_master_arqos"                      : "**KEEP**",
         "dmem_master_arregion"                   : "**KEEP**",
         "dmem_master_arready"                    : "**KEEP**",
         "dmem_master_rvalid"                     : "**KEEP**",
         "dmem_master_rid"                        : "**KEEP**",
         "dmem_master_rdata"                      : "**KEEP**",
         "dmem_master_rresp"                      : "**KEEP**",
         "dmem_master_rlast"                      : "**KEEP**",
         "dmem_master_rready"                     : "**KEEP**",
         "m_external_interrupt_req_set_not_clear" : "**KEEP**",
         "s_external_interrupt_req_set_not_clear" : "**KEEP**",
         "software_interrupt_req_set_not_clear"   : "**KEEP**",
         "timer_interrupt_req_set_not_clear"      : "**KEEP**",
         "nmi_req_set_not_clear"                  : "**KEEP**",
         "set_verbosity_verbosity"                : "**KEEP**",
         "set_verbosity_logdelay"                 : "**KEEP**",
         "EN_set_verbosity"                       : "**KEEP**",
         "RDY_set_verbosity"                      : "**KEEP**"
  },

  "verilog-inline-monitors" : {
    "stage_tracker" : {
      "verilog": 
        [
          "always @(*) begin monitor_s1 = m1.stage1_rg_full & ~monitor_s1_already & __START__; end",
          "always @(posedge clk) begin",
          "    if(rst)",
          "        monitor_s1_already <= 0;",
          "    else if (monitor_s1 && monitor_s2_nxt)",
          "        monitor_s1_already <= 1;",
          "end",
          "always @(*) begin monitor_s2_nxt = (monitor_s2 == 0) ? ( m1.s1_to_s2$D_IN & m1.s1_to_s2$EN & monitor_s1 ?  1'b1 : 1'b0) : ",
          "  ( m1.s2_to_s3$D_IN & m1.s2_to_s3$EN  ?  1'b0 : 1'b1); end",
          "always @(posedge clk) begin",
          "    if(rst) begin",
          "        monitor_s2 <= 0;",
          "        monitor_s2_already <= 0;",
          "    end",
          "    else begin",
          "        monitor_s2 <= monitor_s2_nxt;",
          "        if (monitor_s2 & monitor_s3_nxt)",
          "            monitor_s2_already <= 1;",
          "    end",
          "end",
          "always @(*) begin monitor_s3_nxt = (monitor_s3 == 0) ? ( m1.s2_to_s3$D_IN & m1.s2_to_s3$EN & monitor_s2 ?  1'b1 : 1'b0) : ",
          "  (m1.s3_deq$EN & m1.s3_deq$D_IN ? 1'b0 : 1'b1) ; end ",
          "always @(posedge clk) begin",
          "    if(rst) begin",
          "        monitor_s3 <= 0;",
          "        monitor_s3_delay <= 0;",
          "    end",
          "    else begin",
          "        monitor_s3 <= monitor_s3_nxt;",
          "        if (monitor_s3)",
          "            monitor_s3_delay <= 1'b1; // enough",
          "    end",
          "end",
          "always @(*) begin monitor_s4_nxt = ",
          "  monitor_s3 && m1.rg_retiring$EN ? 1'b1 : monitor_s4; end",
          "always @(posedge clk) begin",
          "    if(rst) begin",
          "        monitor_s4 <= 0;",
          "        monitor_s4_delay <= 0;",
          "    end",
          "    else begin",
          "        monitor_s4 <= monitor_s4_nxt;",
          "        if (monitor_s4)",
          "            monitor_s4_delay <= 1'b1; // enough",
          "    end",
          "end",
          "always @(*) begin end_of_pipeline = monitor_s4 && ~monitor_s4_delay ; end // just check one cycle",
          "// m1_m2 : assert property (~(monitor_s1 && monitor_s2)); // NOTE: cosa/cosa2/yosys-targets ... will try to prove w. these",
          "// m2_m3 : assert property (~(monitor_s2 && monitor_s3)); // NOTE: cosa/cosa2/yosys-targets ... will try to prove w. these",
          "// m3_m4 : assert property (~(monitor_s3 && monitor_s4)); // NOTE: cosa/cosa2/yosys-targets ... will try to prove w. these"
        ],
      "defs" :
          [
          ["monitor_s1_already"  , 1 , "reg"]  ,
          ["end_of_pipeline"     , 1 , "reg"]  ,
          ["monitor_s1"          , 1 , "reg"]  ,
          ["monitor_s1_delay"    , 1 , "reg"]  ,
          ["monitor_s2"          , 1 , "reg"]  ,
          ["monitor_s2_nxt"      , 1 , "reg"]  ,
          ["monitor_s2_already"  , 1 , "reg"]  ,
          ["monitor_s3"          , 1 , "reg"]  ,
          ["monitor_s3_nxt"      , 1 , "reg"]  ,
          ["monitor_s3_delay"    , 1 , "reg"]  ,
          ["monitor_s4_nxt"      , 1 , "reg"]  ,
          ["monitor_s4"          , 1 , "reg"]  ,
          ["monitor_s4_delay"    , 1 , "reg"]
      ] ,

      "refs" :[
        "m1.stage1_rg_full", 
        "m1.s1_to_s2$D_IN",
        "m1.s1_to_s2$EN",
        "m1.s2_to_s3$D_IN",
        "m1.s2_to_s3$EN",
        "m1.s3_deq$D_IN",
        "m1.s3_deq$EN",
        "m1.rg_retiring$EN" ]
    }// stage tracker
  },

  "value-holder" : {
    "pc_after" : {
        "cond":"#monitor_s2#",
        "val":"m1.near_mem$imem_pc",
        "width":"auto"
    },
    "regPull0"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[0]"  , "width" : "auto"} ,
    "regPull1"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[1]"  , "width" : "auto"} ,
    "regPull2"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[2]"  , "width" : "auto"} ,
    "regPull3"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[3]"  , "width" : "auto"} ,
    "regPull4"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[4]"  , "width" : "auto"} ,
    "regPull5"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[5]"  , "width" : "auto"} ,
    "regPull6"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[6]"  , "width" : "auto"} ,
    "regPull7"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[7]"  , "width" : "auto"} ,
    "regPull8"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[8]"  , "width" : "auto"} ,
    "regPull9"  : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[9]"  , "width" : "auto"} ,
    "regPull10" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[10]" , "width" : "auto"} ,
    "regPull11" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[11]" , "width" : "auto"} ,
    "regPull12" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[12]" , "width" : "auto"} ,
    "regPull13" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[13]" , "width" : "auto"} ,
    "regPull14" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[14]" , "width" : "auto"} ,
    "regPull15" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[15]" , "width" : "auto"} ,
    "regPull16" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[16]" , "width" : "auto"} ,
    "regPull17" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[17]" , "width" : "auto"} ,
    "regPull18" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[18]" , "width" : "auto"} ,
    "regPull19" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[19]" , "width" : "auto"} ,
    "regPull20" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[20]" , "width" : "auto"} ,
    "regPull21" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[21]" , "width" : "auto"} ,
    "regPull22" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[22]" , "width" : "auto"} ,
    "regPull23" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[23]" , "width" : "auto"} ,
    "regPull24" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[24]" , "width" : "auto"} ,
    "regPull25" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[25]" , "width" : "auto"} ,
    "regPull26" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[26]" , "width" : "auto"} ,
    "regPull27" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[27]" , "width" : "auto"} ,
    "regPull28" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[28]" , "width" : "auto"} ,
    "regPull29" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[29]" , "width" : "auto"} ,
    "regPull30" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[30]" , "width" : "auto"} ,
    "regPull31" : {"cond" : "#monitor_s3#" , "val" : "m1.gpr_regfile.regfile.arr[31]" , "width" : "auto"} 
  },

  "assumptions" : [
    "__VLG_I_m_external_interrupt_req_set_not_clear == 0",
    "__VLG_I_s_external_interrupt_req_set_not_clear == 0",
    "__VLG_I_software_interrupt_req_set_not_clear == 0",
    "__VLG_I_timer_interrupt_req_set_not_clear == 0",
    "__VLG_I_nmi_req_set_not_clear == 0",
    "m0.pc[1:0] == 2'b00",
    "m1.near_mem$imem_pc[1:0] == 2'b00"
  ],

  "mapping control" : [ "(~__START__) ||  (__IMEM_mem_0_rdata == m1.near_mem$imem_instr)",
    "__pc_after_init__[1:0] == 2'b00",
    "pc_after[1:0] == 2'b00"
  ],

  "annotation" : {
    "reset" : {
        "cycle": 1,
        "no-reset-after": true
    },
    "memory-ports" : {
      "ren"   : "#monitor_s2# & m1.near_mem$dmem_valid",
      "raddr" : "m1.near_mem$dmem_req_addr", // this is word address
      "rdata" : "m1.near_mem$dmem_word64[31:0]",
      "wen"   : "#monitor_s2# & m1.near_mem$dmem_req_op != 0",
      "waddr" : "m1.near_mem$dmem_req_addr",
      "wdata" : ""
    }
  }
}
