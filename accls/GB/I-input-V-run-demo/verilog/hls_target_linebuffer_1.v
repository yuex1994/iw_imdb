// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_target_linebuffer_1 (
        arg_1_TDATA,
        arg_1_TLAST,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        arg_1_TVALID,
        arg_1_TREADY,
        ap_continue,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_lv648_lc_1 = 648'b
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

input  [7:0] arg_1_TDATA;
input  [0:0] arg_1_TLAST;
output  [647:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
input   arg_1_TVALID;
output   arg_1_TREADY;
input   ap_continue;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    hls_target_linebuffer_Loop_1_proc_U0_ap_start;
wire    hls_target_linebuffer_Loop_1_proc_U0_ap_done;
wire    hls_target_linebuffer_Loop_1_proc_U0_ap_continue;
wire    hls_target_linebuffer_Loop_1_proc_U0_ap_idle;
wire    hls_target_linebuffer_Loop_1_proc_U0_ap_ready;
wire   [7:0] hls_target_linebuffer_Loop_1_proc_U0_arg_1_TDATA;
wire    hls_target_linebuffer_Loop_1_proc_U0_arg_1_TVALID;
wire    hls_target_linebuffer_Loop_1_proc_U0_arg_1_TREADY;
wire   [0:0] hls_target_linebuffer_Loop_1_proc_U0_arg_1_TLAST;
wire   [7:0] hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din;
wire    hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n;
wire    hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write;
wire   [7:0] hls_target_linebuffer_U0_in_stream_V_value_V_dout;
wire    hls_target_linebuffer_U0_in_stream_V_value_V_empty_n;
wire    hls_target_linebuffer_U0_in_stream_V_value_V_read;
wire   [647:0] hls_target_linebuffer_U0_out_stream_V_value_V_din;
wire    hls_target_linebuffer_U0_out_stream_V_value_V_full_n;
wire    hls_target_linebuffer_U0_out_stream_V_value_V_write;
wire    hls_target_linebuffer_U0_ap_continue;
wire    hls_target_linebuffer_U0_ap_done;
reg    hls_target_linebuffer_U0_ap_start = 1'b0;
wire    hls_target_linebuffer_U0_ap_idle;
wire    hls_target_linebuffer_U0_ap_ready;
wire    ap_sig_hs_continue;
wire    in_stream_V_value_V_U_ap_dummy_ce;
wire   [7:0] in_stream_V_value_V_din;
wire    in_stream_V_value_V_full_n;
wire    in_stream_V_value_V_write;
wire   [7:0] in_stream_V_value_V_dout;
wire    in_stream_V_value_V_empty_n;
wire    in_stream_V_value_V_read;
reg    ap_reg_procdone_hls_target_linebuffer_Loop_1_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_hls_target_linebuffer_U0 = 1'b0;
reg    ap_CS;
wire    ap_sig_top_allready;


hls_target_linebuffer_Loop_1_proc hls_target_linebuffer_Loop_1_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( hls_target_linebuffer_Loop_1_proc_U0_ap_start ),
    .ap_done( hls_target_linebuffer_Loop_1_proc_U0_ap_done ),
    .ap_continue( hls_target_linebuffer_Loop_1_proc_U0_ap_continue ),
    .ap_idle( hls_target_linebuffer_Loop_1_proc_U0_ap_idle ),
    .ap_ready( hls_target_linebuffer_Loop_1_proc_U0_ap_ready ),
    .arg_1_TDATA( hls_target_linebuffer_Loop_1_proc_U0_arg_1_TDATA ),
    .arg_1_TVALID( hls_target_linebuffer_Loop_1_proc_U0_arg_1_TVALID ),
    .arg_1_TREADY( hls_target_linebuffer_Loop_1_proc_U0_arg_1_TREADY ),
    .arg_1_TLAST( hls_target_linebuffer_Loop_1_proc_U0_arg_1_TLAST ),
    .in_stream_V_value_V_din( hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din ),
    .in_stream_V_value_V_full_n( hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n ),
    .in_stream_V_value_V_write( hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write )
);

hls_target_linebuffer hls_target_linebuffer_U0(
    .in_stream_V_value_V_dout( hls_target_linebuffer_U0_in_stream_V_value_V_dout ),
    .in_stream_V_value_V_empty_n( hls_target_linebuffer_U0_in_stream_V_value_V_empty_n ),
    .in_stream_V_value_V_read( hls_target_linebuffer_U0_in_stream_V_value_V_read ),
    .out_stream_V_value_V_din( hls_target_linebuffer_U0_out_stream_V_value_V_din ),
    .out_stream_V_value_V_full_n( hls_target_linebuffer_U0_out_stream_V_value_V_full_n ),
    .out_stream_V_value_V_write( hls_target_linebuffer_U0_out_stream_V_value_V_write ),
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_continue( hls_target_linebuffer_U0_ap_continue ),
    .ap_done( hls_target_linebuffer_U0_ap_done ),
    .ap_start( hls_target_linebuffer_U0_ap_start ),
    .ap_idle( hls_target_linebuffer_U0_ap_idle ),
    .ap_ready( hls_target_linebuffer_U0_ap_ready )
);

FIFO_hls_target_linebuffer_1_in_stream_V_value_V in_stream_V_value_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( in_stream_V_value_V_U_ap_dummy_ce ),
    .if_write_ce( in_stream_V_value_V_U_ap_dummy_ce ),
    .if_din( in_stream_V_value_V_din ),
    .if_full_n( in_stream_V_value_V_full_n ),
    .if_write( in_stream_V_value_V_write ),
    .if_dout( in_stream_V_value_V_dout ),
    .if_empty_n( in_stream_V_value_V_empty_n ),
    .if_read( in_stream_V_value_V_read )
);



/// ap_reg_procdone_hls_target_linebuffer_Loop_1_proc_U0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_hls_target_linebuffer_Loop_1_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_hls_target_linebuffer_Loop_1_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_hls_target_linebuffer_Loop_1_proc_U0 <= ap_const_logic_0;
        end else if ((hls_target_linebuffer_Loop_1_proc_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_hls_target_linebuffer_Loop_1_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_hls_target_linebuffer_U0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_hls_target_linebuffer_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_hls_target_linebuffer_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_hls_target_linebuffer_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == hls_target_linebuffer_U0_ap_done)) begin
            ap_reg_procdone_hls_target_linebuffer_U0 <= ap_const_logic_1;
        end
    end
end

/// hls_target_linebuffer_U0_ap_start assign process. ///
always @ (posedge ap_clk) begin : ap_ret_hls_target_linebuffer_U0_ap_start
    if (ap_rst == 1'b1) begin
        hls_target_linebuffer_U0_ap_start <= ap_const_logic_0;
    end else begin
        hls_target_linebuffer_U0_ap_start <= ap_const_logic_1;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    ap_CS <= ap_const_logic_0;
end

/// ap_idle assign process. ///
always @ (hls_target_linebuffer_Loop_1_proc_U0_ap_idle or hls_target_linebuffer_U0_ap_idle) begin
    if (((hls_target_linebuffer_Loop_1_proc_U0_ap_idle == ap_const_logic_1) & (ap_const_logic_1 == hls_target_linebuffer_U0_ap_idle))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (hls_target_linebuffer_U0_ap_done) begin
    if ((ap_const_logic_1 == hls_target_linebuffer_U0_ap_done)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_continue;
assign ap_sig_top_allready = hls_target_linebuffer_Loop_1_proc_U0_ap_ready;
assign arg_1_TREADY = hls_target_linebuffer_Loop_1_proc_U0_arg_1_TREADY;
assign hls_target_linebuffer_Loop_1_proc_U0_ap_continue = ap_const_logic_1;
assign hls_target_linebuffer_Loop_1_proc_U0_ap_start = ap_start;
assign hls_target_linebuffer_Loop_1_proc_U0_arg_1_TDATA = arg_1_TDATA;
assign hls_target_linebuffer_Loop_1_proc_U0_arg_1_TLAST = arg_1_TLAST;
assign hls_target_linebuffer_Loop_1_proc_U0_arg_1_TVALID = arg_1_TVALID;
assign hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n = in_stream_V_value_V_full_n;
assign hls_target_linebuffer_U0_ap_continue = ap_sig_hs_continue;
assign hls_target_linebuffer_U0_in_stream_V_value_V_dout = in_stream_V_value_V_dout;
assign hls_target_linebuffer_U0_in_stream_V_value_V_empty_n = in_stream_V_value_V_empty_n;
assign hls_target_linebuffer_U0_out_stream_V_value_V_full_n = out_stream_V_value_V_full_n;
assign in_stream_V_value_V_U_ap_dummy_ce = ap_const_logic_1;
assign in_stream_V_value_V_din = hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din;
assign in_stream_V_value_V_read = hls_target_linebuffer_U0_in_stream_V_value_V_read;
assign in_stream_V_value_V_write = hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write;
assign out_stream_V_value_V_din = hls_target_linebuffer_U0_out_stream_V_value_V_din;
assign out_stream_V_value_V_write = hls_target_linebuffer_U0_out_stream_V_value_V_write;


endmodule //hls_target_linebuffer_1

