// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

//(* CORE_GENERATION_INFO="hls_target,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.080000,HLS_SYN_LAT=318169,HLS_SYN_TPT=318170,HLS_SYN_MEM=8,HLS_SYN_DSP=63,HLS_SYN_FF=2626,HLS_SYN_LUT=2849}" *)

module hls_target (
        // below is auxiliary init
        //eqcheck_init,
        // above is auxiliary init
        s_axi_config_AWVALID,
        s_axi_config_AWREADY,
        s_axi_config_AWADDR,
        s_axi_config_WVALID,
        s_axi_config_WREADY,
        s_axi_config_WDATA,
        s_axi_config_WSTRB,
        s_axi_config_ARVALID,
        s_axi_config_ARREADY,
        s_axi_config_ARADDR,
        s_axi_config_RVALID,
        s_axi_config_RREADY,
        s_axi_config_RDATA,
        s_axi_config_RRESP,
        s_axi_config_BVALID,
        s_axi_config_BREADY,
        s_axi_config_BRESP,
        ap_clk,
        ap_rst_n,
        v_interrupt,
        arg_0_TDATA,
        arg_0_TLAST,
        arg_1_TDATA,
        arg_1_TLAST,
        arg_1_TVALID,
        arg_1_TREADY,
        arg_0_TVALID,
        arg_0_TREADY
);

parameter    C_S_AXI_CONFIG_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CONFIG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CONFIG_WSTRB_WIDTH = (C_S_AXI_CONFIG_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

reg[31:0] GB_pc/*verilator public*/;
always @(posedge ap_clk) begin
  if (ap_rst_n == 0)
    GB_pc <= 0;
  else if (arg_0_TVALID && arg_0_TREADY) 
    GB_pc <= GB_pc + 1;
  else if (arg_1_TVALID && arg_1_TREADY)
    GB_pc <= GB_pc + 1;
end

// below is auxiliary init
//input eqcheck_init;
// above is auxiliary init
input   s_axi_config_AWVALID;
output   s_axi_config_AWREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1 : 0] s_axi_config_AWADDR;
input   s_axi_config_WVALID;
output   s_axi_config_WREADY;
input  [C_S_AXI_CONFIG_DATA_WIDTH - 1 : 0] s_axi_config_WDATA;
input  [C_S_AXI_CONFIG_WSTRB_WIDTH - 1 : 0] s_axi_config_WSTRB;
input   s_axi_config_ARVALID;
output   s_axi_config_ARREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1 : 0] s_axi_config_ARADDR;
output   s_axi_config_RVALID;
input   s_axi_config_RREADY;
output  [C_S_AXI_CONFIG_DATA_WIDTH - 1 : 0] s_axi_config_RDATA;
output  [1:0] s_axi_config_RRESP;
output   s_axi_config_BVALID;
input   s_axi_config_BREADY;
output  [1:0] s_axi_config_BRESP;
input   ap_clk;
input   ap_rst_n;
output   v_interrupt;
output  [7:0] arg_0_TDATA;
output  [0:0] arg_0_TLAST;
input  [7:0] arg_1_TDATA;
input  [0:0] arg_1_TLAST;
input   arg_1_TVALID;
output   arg_1_TREADY;
output   arg_0_TVALID;
input   arg_0_TREADY;

reg    ap_rst_n_inv;
wire    hls_target_config_s_axi_U_ap_dummy_ce;
wire    ap_start /*verilator public*/;
wire    ap_ready;
wire    ap_done;
reg    ap_idle;
wire   [7:0] hls_target_linebuffer_1_U0_arg_1_TDATA;
wire   [0:0] hls_target_linebuffer_1_U0_arg_1_TLAST;
wire   [647:0] hls_target_linebuffer_1_U0_out_stream_V_value_V_din;
wire    hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n;
wire    hls_target_linebuffer_1_U0_out_stream_V_value_V_write;
wire    hls_target_linebuffer_1_U0_arg_1_TVALID;
wire    hls_target_linebuffer_1_U0_arg_1_TREADY;
wire    hls_target_linebuffer_1_U0_ap_continue;
wire    hls_target_linebuffer_1_U0_ap_done;
wire    hls_target_linebuffer_1_U0_ap_start;
wire    hls_target_linebuffer_1_U0_ap_idle;
wire    hls_target_linebuffer_1_U0_ap_ready;
reg    hls_target_Loop_1_proc_U0_ap_start = 1'b0;
wire    hls_target_Loop_1_proc_U0_ap_done;
wire    hls_target_Loop_1_proc_U0_ap_continue;
wire    hls_target_Loop_1_proc_U0_ap_idle;
wire    hls_target_Loop_1_proc_U0_ap_ready;
wire   [647:0] hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout;
wire    hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n;
wire    hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read;
wire   [7:0] hls_target_Loop_1_proc_U0_arg_0_TDATA;
wire    hls_target_Loop_1_proc_U0_arg_0_TVALID;
wire    hls_target_Loop_1_proc_U0_arg_0_TREADY;
wire   [0:0] hls_target_Loop_1_proc_U0_arg_0_TLAST;
wire    ap_sig_hs_continue;
wire    p_p2_in_bounded_stencil_stream_s_U_ap_dummy_ce;
wire   [647:0] p_p2_in_bounded_stencil_stream_s_din;
wire    p_p2_in_bounded_stencil_stream_s_full_n;
wire    p_p2_in_bounded_stencil_stream_s_write;
wire   [647:0] p_p2_in_bounded_stencil_stream_s_dout;
wire    p_p2_in_bounded_stencil_stream_s_empty_n;
wire    p_p2_in_bounded_stencil_stream_s_read;
reg    ap_reg_procdone_hls_target_linebuffer_1_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_hls_target_Loop_1_proc_U0 = 1'b0;
reg    ap_CS;
wire    ap_sig_top_allready;
/*
hls_target_config_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONFIG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONFIG_DATA_WIDTH ))
hls_target_config_s_axi_U(
    .AWVALID( s_axi_config_AWVALID ),
    .AWREADY( s_axi_config_AWREADY ),
    .AWADDR( s_axi_config_AWADDR ),
    .WVALID( s_axi_config_WVALID ),
    .WREADY( s_axi_config_WREADY ),
    .WDATA( s_axi_config_WDATA ),
    .WSTRB( s_axi_config_WSTRB ),
    .ARVALID( s_axi_config_ARVALID ),
    .ARREADY( s_axi_config_ARREADY ),
    .ARADDR( s_axi_config_ARADDR ),
    .RVALID( s_axi_config_RVALID ),
    .RREADY( s_axi_config_RREADY ),
    .RDATA( s_axi_config_RDATA ),
    .RRESP( s_axi_config_RRESP ),
    .BVALID( s_axi_config_BVALID ),
    .BREADY( s_axi_config_BREADY ),
    .BRESP( s_axi_config_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( hls_target_config_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .v_interrupt( v_interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle )
);
*/

hls_target_linebuffer_1 hls_target_linebuffer_1_U0(
    .arg_1_TDATA( hls_target_linebuffer_1_U0_arg_1_TDATA ),
    .arg_1_TLAST( hls_target_linebuffer_1_U0_arg_1_TLAST ),
    .out_stream_V_value_V_din( hls_target_linebuffer_1_U0_out_stream_V_value_V_din ),
    .out_stream_V_value_V_full_n( hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n ),
    .out_stream_V_value_V_write( hls_target_linebuffer_1_U0_out_stream_V_value_V_write ),
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .arg_1_TVALID( hls_target_linebuffer_1_U0_arg_1_TVALID ),
    .arg_1_TREADY( hls_target_linebuffer_1_U0_arg_1_TREADY ),
    .ap_continue( hls_target_linebuffer_1_U0_ap_continue ),
    .ap_done( hls_target_linebuffer_1_U0_ap_done ),
    .ap_start( hls_target_linebuffer_1_U0_ap_start ),
    .ap_idle( hls_target_linebuffer_1_U0_ap_idle ),
    .ap_ready( hls_target_linebuffer_1_U0_ap_ready )
);

hls_target_Loop_1_proc hls_target_Loop_1_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( hls_target_Loop_1_proc_U0_ap_start ),
    .ap_done( hls_target_Loop_1_proc_U0_ap_done ),
    .ap_continue( hls_target_Loop_1_proc_U0_ap_continue ),
    .ap_idle( hls_target_Loop_1_proc_U0_ap_idle ),
    .ap_ready( hls_target_Loop_1_proc_U0_ap_ready ),
    .p_p2_in_bounded_stencil_stream_V_value_V_dout( hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout ),
    .p_p2_in_bounded_stencil_stream_V_value_V_empty_n( hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n ),
    .p_p2_in_bounded_stencil_stream_V_value_V_read( hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read ),
    .arg_0_TDATA( hls_target_Loop_1_proc_U0_arg_0_TDATA ),
    .arg_0_TVALID( hls_target_Loop_1_proc_U0_arg_0_TVALID ),
    .arg_0_TREADY( hls_target_Loop_1_proc_U0_arg_0_TREADY ),
    .arg_0_TLAST( hls_target_Loop_1_proc_U0_arg_0_TLAST )
);

FIFO_hls_target_p_p2_in_bounded_stencil_stream_s p_p2_in_bounded_stencil_stream_s_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( p_p2_in_bounded_stencil_stream_s_U_ap_dummy_ce ),
    .if_write_ce( p_p2_in_bounded_stencil_stream_s_U_ap_dummy_ce ),
    .if_din( p_p2_in_bounded_stencil_stream_s_din ),
    .if_full_n( p_p2_in_bounded_stencil_stream_s_full_n ),
    .if_write( p_p2_in_bounded_stencil_stream_s_write ),
    .if_dout( p_p2_in_bounded_stencil_stream_s_dout ),
    .if_empty_n( p_p2_in_bounded_stencil_stream_s_empty_n ),
    .if_read( p_p2_in_bounded_stencil_stream_s_read )
);



/// ap_reg_procdone_hls_target_Loop_1_proc_U0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_hls_target_Loop_1_proc_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_hls_target_Loop_1_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_hls_target_Loop_1_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == hls_target_Loop_1_proc_U0_ap_done)) begin
            ap_reg_procdone_hls_target_Loop_1_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_hls_target_linebuffer_1_U0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_hls_target_linebuffer_1_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_hls_target_linebuffer_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_hls_target_linebuffer_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == hls_target_linebuffer_1_U0_ap_done)) begin
            ap_reg_procdone_hls_target_linebuffer_1_U0 <= ap_const_logic_1;
        end
    end
end

/// hls_target_Loop_1_proc_U0_ap_start assign process. ///
always @ (posedge ap_clk) begin : ap_ret_hls_target_Loop_1_proc_U0_ap_start
    if (ap_rst_n_inv == 1'b1) begin
        hls_target_Loop_1_proc_U0_ap_start <= ap_const_logic_0;
    end else begin
        hls_target_Loop_1_proc_U0_ap_start <= ap_const_logic_1;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    ap_CS <= ap_const_logic_0;
end

/// ap_idle assign process. ///
always @ (hls_target_linebuffer_1_U0_ap_idle or hls_target_Loop_1_proc_U0_ap_idle) begin
    if (((ap_const_logic_1 == hls_target_linebuffer_1_U0_ap_idle) & (ap_const_logic_1 == hls_target_Loop_1_proc_U0_ap_idle))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (hls_target_Loop_1_proc_U0_ap_done) begin
    if ((ap_const_logic_1 == hls_target_Loop_1_proc_U0_ap_done)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end
assign ap_sig_hs_continue = ap_const_logic_1;
assign ap_sig_top_allready = hls_target_linebuffer_1_U0_ap_ready;
assign arg_0_TDATA = hls_target_Loop_1_proc_U0_arg_0_TDATA;
assign arg_0_TLAST = hls_target_Loop_1_proc_U0_arg_0_TLAST;
assign arg_0_TVALID = hls_target_Loop_1_proc_U0_arg_0_TVALID;
assign arg_1_TREADY = hls_target_linebuffer_1_U0_arg_1_TREADY;
assign hls_target_Loop_1_proc_U0_ap_continue = ap_sig_hs_continue;
assign hls_target_Loop_1_proc_U0_arg_0_TREADY = arg_0_TREADY;
assign hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout = p_p2_in_bounded_stencil_stream_s_dout;
assign hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n = p_p2_in_bounded_stencil_stream_s_empty_n;
assign hls_target_config_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign hls_target_linebuffer_1_U0_ap_continue = ap_const_logic_1;
assign hls_target_linebuffer_1_U0_ap_start = ap_start;
assign hls_target_linebuffer_1_U0_arg_1_TDATA = arg_1_TDATA;
assign hls_target_linebuffer_1_U0_arg_1_TLAST = arg_1_TLAST;
assign hls_target_linebuffer_1_U0_arg_1_TVALID = arg_1_TVALID;
assign hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n = p_p2_in_bounded_stencil_stream_s_full_n;
assign p_p2_in_bounded_stencil_stream_s_U_ap_dummy_ce = ap_const_logic_1;
assign p_p2_in_bounded_stencil_stream_s_din = hls_target_linebuffer_1_U0_out_stream_V_value_V_din;
assign p_p2_in_bounded_stencil_stream_s_read = hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read;
assign p_p2_in_bounded_stencil_stream_s_write = hls_target_linebuffer_1_U0_out_stream_V_value_V_write;


endmodule //hls_target

